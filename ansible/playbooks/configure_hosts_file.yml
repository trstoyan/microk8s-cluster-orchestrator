---
- name: Configure /etc/hosts file for MicroK8s HA cluster
  hosts: microk8s_nodes
  become: yes
  gather_facts: yes
  
  vars:
    backup_original: true
    hosts_backup_dir: "/tmp/hosts_backups"
    
  tasks:
    - name: Create backup directory
      file:
        path: "{{ hosts_backup_dir }}"
        state: directory
        mode: '0755'
      when: backup_original
    
    - name: Backup original /etc/hosts file
      copy:
        src: /etc/hosts
        dest: "{{ hosts_backup_dir }}/hosts_{{ ansible_hostname }}_{{ ansible_date_time.epoch }}"
        remote_src: yes
        mode: '0644'
      when: backup_original
      register: hosts_backup
    
    - name: Display backup information
      debug:
        msg: "Original /etc/hosts backed up to: {{ hosts_backup.dest }}"
      when: backup_original and hosts_backup is succeeded
    
    - name: Get current /etc/hosts content
      slurp:
        src: /etc/hosts
      register: current_hosts_content
      changed_when: false
    
    - name: Decode current hosts content
      set_fact:
        current_hosts: "{{ current_hosts_content.content | b64decode | split('\n') }}"
    
    - name: Filter out existing cluster entries
      set_fact:
        filtered_hosts: "{{ current_hosts | select('match', '^(?!.*# MicroK8s cluster entries)') | list }}"
    
    - name: Create cluster hosts entries
      set_fact:
        cluster_hosts_entries: |
          # MicroK8s cluster entries - Auto-generated by cluster orchestrator
          {% for host in groups['microk8s_nodes'] %}
          {{ hostvars[host]['ansible_host'] }} {{ host }}
          {% endfor %}
          # End MicroK8s cluster entries
    
    - name: Combine filtered hosts with cluster entries
      set_fact:
        new_hosts_content: |
          {{ filtered_hosts | join('\n') }}
          
          {{ cluster_hosts_entries }}
    
    - name: Write new /etc/hosts file
      copy:
        content: "{{ new_hosts_content }}"
        dest: /etc/hosts
        mode: '0644'
        backup: yes
      register: hosts_update
    
    - name: Display updated hosts file
      debug:
        msg: "Updated /etc/hosts file with {{ groups['microk8s_nodes'] | length }} cluster entries"
    
    - name: Verify hosts file syntax
      command: getent hosts {{ item }}
      loop: "{{ groups['microk8s_nodes'] }}"
      register: hosts_verification
      changed_when: false
      failed_when: false
    
    - name: Display verification results
      debug:
        msg: "Hostname {{ item.item }} resolves to: {{ item.stdout_lines[0] if item.rc == 0 else 'FAILED' }}"
      loop: "{{ hosts_verification.results }}"
    
    - name: Test DNS resolution for all cluster nodes
      command: "nslookup {{ item }}"
      loop: "{{ groups['microk8s_nodes'] }}"
      register: dns_test_results
      changed_when: false
      failed_when: false
    
    - name: Display DNS test results
      debug:
        msg: "DNS resolution for {{ item.item }}: {{ 'SUCCESS' if item.rc == 0 else 'FAILED' }}"
      loop: "{{ dns_test_results.results }}"
    
    - name: Check for duplicate entries
      command: "sort /etc/hosts | uniq -d"
      register: duplicate_check
      changed_when: false
      failed_when: false
    
    - name: Report duplicate entries if any
      debug:
        msg: "WARNING: Duplicate entries found in /etc/hosts: {{ duplicate_check.stdout_lines }}"
      when: duplicate_check.stdout_lines | length > 0
    
    - name: Get final hosts file content for verification
      command: cat /etc/hosts
      register: final_hosts_content
      changed_when: false
    
    - name: Display final /etc/hosts content
      debug:
        msg: "{{ final_hosts_content.stdout_lines }}"
    
    - name: Create summary report
      set_fact:
        hosts_config_summary: |
          {
            "hostname": "{{ ansible_hostname }}",
            "ip_address": "{{ ansible_default_ipv4.address }}",
            "cluster_nodes_count": {{ groups['microk8s_nodes'] | length }},
            "cluster_nodes": {{ groups['microk8s_nodes'] | to_json }},
            "backup_created": {{ backup_original | to_json }},
            "backup_path": "{{ hosts_backup.dest if backup_original and hosts_backup is succeeded else 'N/A' }}",
            "hosts_file_updated": {{ hosts_update is succeeded | to_json }},
            "verification_passed": {{ (hosts_verification.results | selectattr('rc', 'equalto', 0) | list | length) == (groups['microk8s_nodes'] | length) | to_json }},
            "timestamp": "{{ ansible_date_time.iso8601 }}"
          }
    
    - name: Display configuration summary
      debug:
        msg: "{{ hosts_config_summary | to_nice_json }}"
    
    - name: Save configuration summary to file
      copy:
        content: "{{ hosts_config_summary | to_nice_json }}"
        dest: "/tmp/hosts_config_summary_{{ ansible_hostname }}.json"
        mode: '0644'
      changed_when: false
